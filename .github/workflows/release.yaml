# workflow to release assets as part of the release
name: Upload Release Asset
on:
  push:
    tags:
    - 'v*'
env:
  IMAGE_NAME: cluster-api-provider-packet
  GHCR_REGISTRY: ghcr.io/${{ github.repository_owner }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_ORG }}
  QUAY_REGISTRY: quay.io/${{ secrets.QUAY_ORG }}
  REGISTRY: quay.io/${{ secrets.QUAY_ORG }}
  metadata_flavor: latest=false
  metadata_tags: type=ref,event=tag
jobs:
  manager-image:
    name: Build and push manager image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-go@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Generate metadata
      id: meta
      uses: ./.github/actions/metadata
      with:
        docker_username: ${{ secrets.DOCKER_USERNAME }}
        quay_username: ${{ secrets.QUAY_USERNAME }}
        metadata_flavor: ${{ env.metadata_flavor }}
        metadata_tags: ${{ env.metadata_tags }}

    - name: Log in to ghcr.io
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log into DockerHub
      uses: docker/login-action@v2
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      if: ${{ env.DOCKER_USERNAME != '' }}
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log into quay.io
      uses: docker/login-action@v2
      env:
        QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
      if: ${{ env.QUAY_USERNAME != '' }}
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Setup Env
      run: |
        DOCKER_BUILD_LDFLAGS="$(hack/version.sh)"
        echo 'DOCKER_BUILD_LDFLAGS<<EOF' >> $GITHUB_ENV
        echo $DOCKER_BUILD_LDFLAGS >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: Build and push manager image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        build-args: |
          LDFLAGS=${{ env.DOCKER_BUILD_LDFLAGS }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha, scope=${{ github.workflow }}
        cache-to: type=gha, mode=max, scope=${{ github.workflow }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
    - manager-image
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - uses: actions/setup-go@v4
    - uses: actions/cache@v3
      with:
        path: hack/tools/bin
        key: ${{ runner.os }}-tools-bin-release-${{ hashFiles('Makefile') }}
        restore-keys: |
          ${{ runner.os }}-tools-bin-release-
          ${{ runner.os }}-tools-bin-
   
    - name: Generate metadata
      id: meta
      uses: ./.github/actions/metadata
      with:
        docker_username: ${{ secrets.DOCKER_USERNAME }}
        quay_username: ${{ secrets.QUAY_USERNAME }}
        metadata_flavor: ${{ env.metadata_flavor }}
        metadata_tags: ${{ env.metadata_tags }}

    - name: manifest
      run: make release
      env:
        TAG: ${{ steps.meta.outputs.version }}

    - name: Generate Release Notes
      run: |
        release_notes=$(gh api repos/{owner}/{repo}/releases/generate-notes -F tag_name=${{ github.ref }} --jq .body)
        echo 'RELEASE_NOTES<<EOF' >> $GITHUB_ENV
        echo "${release_notes}" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OWNER: ${{ github.repository_owner }}
        REPO: ${{ github.event.repository.name }}
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: out/release/*
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: false
